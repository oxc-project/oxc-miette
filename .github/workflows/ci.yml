name: CI

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
      - "**/*.md"
      - "**/*.yml"
      - "!.github/workflows/ci.yml"
  push:
    branches:
      - main
      - "renovate/**"
    paths-ignore:
      - "**/*.md"
      - "**/*.yml"
      - "!.github/workflows/ci.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: ${{ github.ref_name != 'main' }}

jobs:
  fmt_and_docs:
    name: Check fmt & build docs
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: Boshen/setup-rust@main
        with:
          components: rustfmt rust-docs
      - run: cargo fmt --all -- --check
      - run: RUSTDOCFLAGS='-D warnings' cargo doc --no-deps

  build_and_test:
    name: Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        features: [fancy, syntect-highlighter]
        rust: [1.70.0, stable]
        os: [ubuntu-latest, macOS-latest, windows-latest]
        exclude:
          - features: syntect-highlighter
            rust: 1.70.0

    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: Boshen/setup-rust@main
        with:
          save-cache: ${{ github.ref_name == 'main' }}
          components: clippy
      - name: Clippy
        run: cargo clippy --all -- -D warnings
      - name: Run tests
        if: matrix.rust == 'stable'
        run: cargo test --all --verbose --features ${{matrix.features}}
      - name: Run tests
        if: matrix.rust == '1.70.0'
        run: cargo test --all --verbose --features ${{matrix.features}} no-format-args-capture

  wasm:
    name: Check Wasm build
    runs-on: ubuntu-latest
    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: Boshen/setup-rust@main
        with:
          save-cache: ${{ github.ref_name == 'main' }}
          cache-key: wasm
      - name: Check wasm target
        run: |
          rustup target add wasm32-unknown-unknown
          cargo check --target wasm32-unknown-unknown --features fancy-no-syscall

  miri:
    name: Miri
    runs-on: ubuntu-latest

    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: Boshen/setup-rust@main
        with:
          save-cache: ${{ github.ref_name == 'main' }}
          cache-key: miri
      - name: Install Miri
        run: |
          rustup toolchain install nightly --component miri
          rustup override set nightly
          cargo miri setup
      - name: Run tests with miri
        env:
          MIRIFLAGS: -Zmiri-disable-isolation -Zmiri-strict-provenance
        run: cargo miri test --all --verbose --features fancy

  minimal_versions:
    name: Minimal versions check
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
      - uses: taiki-e/checkout-action@b13d20b7cda4e2f325ef19895128f7ff735c0b3d # v1.3.1
      - uses: Boshen/setup-rust@main
        with:
          save-cache: ${{ github.ref_name == 'main' }}
          cache-key: wasm
      - name: Install Nightly
        run: |
          rustup toolchain install nightly
          rustup override set nightly
      - name: Run minimal version build
        run: cargo build -Z direct-minimal-versions --features fancy,no-format-args-capture
